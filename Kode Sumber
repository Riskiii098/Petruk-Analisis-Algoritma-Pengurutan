#include <iostream>
#include <vector>
#include <chrono>
#include <algorithm>
#include <random>

using namespace std;
using namespace std::chrono;

// Fungsi Bubble Sort
void bubbleSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n-1; ++i) {
        for (int j = 0; j < n-i-1; ++j) {
            if (arr[j] > arr[j+1]) {
                swap(arr[j], arr[j+1]);
            }
        }
    }
}

// Fungsi Insertion Sort
void insertionSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 1; i < n; ++i) {
        int key = arr[i];
        int j = i - 1;
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}

// Fungsi Selection Sort
void selectionSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n-1; ++i) {
        int min_idx = i;
        for (int j = i+1; j < n; ++j) {
            if (arr[j] < arr[min_idx]) {
                min_idx = j;
            }
        }
        swap(arr[min_idx], arr[i]);
    }
}

// Fungsi Merge untuk Merge Sort
void merge(vector<int>& arr, int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    vector<int> L(n1), R(n2);

    for (int i = 0; i < n1; ++i)
        L[i] = arr[left + i];
    for (int j = 0; j < n2; ++j)
        R[j] = arr[mid + 1 + j];

    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            ++i;
        } else {
            arr[k] = R[j];
            ++j;
        }
        ++k;
    }

    while (i < n1) {
        arr[k] = L[i];
        ++i;
        ++k;
    }

    while (j < n2) {
        arr[k] = R[j];
        ++j;
        ++k;
    }
}

// Fungsi Merge Sort
void mergeSort(vector<int>& arr, int left, int right) {
    if (left >= right) return;
    int mid = left + (right - left) / 2;
    mergeSort(arr, left, mid);
    mergeSort(arr, mid + 1, right);
    merge(arr, left, mid, right);
}

// Fungsi Partition untuk Quick Sort
int partition(vector<int>& arr, int low, int high) {
    int pivot = arr[high];
    int i = low - 1;
    for (int j = low; j <= high - 1; ++j) {
        if (arr[j] < pivot) {
            ++i;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]);
    return (i + 1);
}

// Fungsi Quick Sort
void quickSort(vector<int>& arr, int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

// Fungsi untuk mengukur waktu eksekusi algoritma
void measureExecutionTime(void (*sortFunc)(vector<int>&), vector<int>& arr, const string& sortName, int N) {
    auto start = high_resolution_clock::now();
    sortFunc(arr);
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(stop - start);
    cout << sortName << " N=" << N << ": " << duration.count() << " mikrodetik" << endl;
}

int main() {
    vector<int> sizes = {10, 100, 500, 1000, 10000};
    for (int N : sizes) {
        vector<int> arr(N);
        random_device rd;
        mt19937 gen(rd());
        uniform_int_distribution<> dis(1, 10000);

        // Kondisi data acak
        generate(arr.begin(), arr.end(), [&]() { return dis(gen); });
        vector<int> arr1 = arr, arr2 = arr, arr3 = arr, arr4 = arr, arr5 = arr;

        cout << "Kondisi Data: Acak" << endl;
        measureExecutionTime(bubbleSort, arr1, "Bubble Sort", N);
        measureExecutionTime(insertionSort, arr2, "Insertion Sort", N);
        measureExecutionTime(selectionSort, arr3, "Selection Sort", N);
        measureExecutionTime([](vector<int>& arr) { mergeSort(arr, 0, arr.size() - 1); }, arr4, "Merge Sort", N);
        measureExecutionTime([](vector<int>& arr) { quickSort(arr, 0, arr.size() - 1); }, arr5, "Quick Sort", N);

        // Kondisi data terurut terbalik
        sort(arr.rbegin(), arr.rend());
        arr1 = arr; arr2 = arr; arr3 = arr; arr4 = arr; arr5 = arr;

        cout << "Kondisi Data: Terurut Terbalik" << endl;
        measureExecutionTime(bubbleSort, arr1, "Bubble Sort", N);
        measureExecutionTime(insertionSort, arr2, "Insertion Sort", N);
        measureExecutionTime(selectionSort, arr3, "Selection Sort", N);
        measureExecutionTime([](vector<int>& arr) { mergeSort(arr, 0, arr.size() - 1); }, arr4, "Merge Sort", N);
        measureExecutionTime([](vector<int>& arr) { quickSort(arr, 0, arr.size() - 1); }, arr5, "Quick Sort", N);

        // Kondisi data sudah terurut
        sort(arr.begin(), arr.end());
        arr1 = arr; arr2 = arr; arr3 = arr; arr4 = arr; arr5 = arr;

        cout << "Kondisi Data: Sudah Terurut" << endl;
        measureExecutionTime(bubbleSort, arr1, "Bubble Sort", N);
        measureExecutionTime(insertionSort, arr2, "Insertion Sort", N);
        measureExecutionTime(selectionSort, arr3, "Selection Sort", N);
        measureExecutionTime([](vector<int>& arr) { mergeSort(arr, 0, arr.size() - 1); }, arr4, "Merge Sort", N);
        measureExecutionTime([](vector<int>& arr) { quickSort(arr, 0, arr.size() - 1); }, arr5, "Quick Sort", N);
    }
    return 0;
}
